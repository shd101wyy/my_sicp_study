;; Section 5.2
;; Register Machine

;; (make-machine <register-names> <operations> <controller>) constructs and returns a model of the machine with the given registers, operations, and controller.
;; (set-register-contents! <machine-model> <register-name> <value>)
;;    stores a value in a simulated register in the given machine.
;; (get-register-contents <machine-model> <register-name>) returns the contents of a simulated register in the given machine.
;; (start <machine-model>)
;;    simulates the execution of the given machine, starting from the beginning of the controller sequence and stopping when it reaches the end of the sequence.

;; run gcd register machine
(define gcd-machine
  (make-machine
   '(a b t)
   (list (list 'rem remainder) (list '= =))
   '(test-b
       (test (op =) (reg b) (const 0))
       (branch (label gcd-done))
       (assign t (op rem) (reg a) (reg b))
       (assign a (reg b))
       (assign b (reg t))
       (goto (label test-b))
     gcd-done)))

;; To compute GCDs with this machine, we set the input registers, start the machine, and examine the result when the simulation terminates:
(set-register-contents! gcd-machine 'a 206)
;; done
(set-register-contents! gcd-machine 'b 40)
;; done
(start gcd-machine)
;; done
(get-register-contents gcd-machine 'a)
;; 2


;;====================

(define (make-machine register-names ops controller-text)
  (let ((machine (make-new-machine)))
    (for-each (lambda (register-name) ((machine 'allocate-register) register-name)) 
              register-names)            ;; machine deal with register-name
    ((machine 'install-operations) ops)  ;; deal with ops
    ((machine 'install-instruction-sequence)   ;; deal with controller text
     (assemble controller-text machine)) 
    machine)) ;; return machine

;; define register
(define (make-register name)
  (let ((contents '*unassigned*))
    (define (dispatch message)
      (cond ((eq? message 'get) contents)
            ((eq? message 'set) 
             (lambda (value) (set! contents value)))
            (else
             (error "Unknown request -- REGISTER" message))))
    dispatch))
;; the following procedures are used to access registers
(define (get-contents register)
  (register 'get))
(define (ste-contents! register value )
  ((register 'set) value))

;; define stack
(define (make-stack)
  (let ((s '()))
    (define (push x)    ;; push value
      (set! s (cons x s)))
    (define (pop)       ;; pop value
      (if (null? s)
          (error "Empty Stack -- POP")
          (let ((top (car s)))
            (set! s (cdr s))
            top)))
    (define (initialize)
      (set! s '())
      'done)
    (define (dispatch message)
      (cond ((eq? message 'push) push)
            ((eq? message 'pop) (pop))
            ((eq? message 'initialize) (initialize))
            (else (error "Unknown request -- STACK" message))))
    dispatch))
;; the following procedures are used to access stack
(define (pop stack)
  (stack 'pop))
(define (push stack value)
  ((stack 'push) value))
;; =======


;; the Basic Machine 
(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '()))
    (let ((the-ops
           (list (list 'initialize-stack 
                       (lambda () (stack 'initialize)))))
          (register-table 
           (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table 
                  (cons (list name (make-register name)) 
                        register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register: " name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'Done
              (begin
                ((instruction-execution-proc (car insts)))
                (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq) (set! install-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations) 
               (lambda (op) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              (else (error "Unknown request -- MACHINE" message))
         ))
      dispatch
      )))
(define (start machine)
  (machine 'start))
(define (get-register-contents machine register-name)
  (get-contents (get-register machine register-name)))
(define (set-register-contents! machine register-name value)
  (set-contents! (get-register machine register-name) value)
  'done)
(define (get-register machine reg-name)
  ((machine 'get-register) reg-name))






















