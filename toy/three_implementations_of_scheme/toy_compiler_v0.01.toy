
;; Toy Language Compiler
;; for bootstrap
;; Available procedures
;; =================================
;; Summary
;; Builtin Procedures
;; var primitive_symbol_table_list = [
;; 'car', 'cdr', 'set-car!', 'set-cdr!', 'cons', 'closure?', 'vector?', 'dictionary?', 'number?', 'pair?', 'atom?', 'builtin-procedure?',
;; 'display', 'dictionary', 'vector', 'list', 'eq?', 'push', 'pop', 'integer?', 'float?', 'null?', '+', '-', '*', '/', '->str', 'atom-ref'
;; '<'
;; ];

;; helper functions
(define (cddr x) (cdr (cdr x)))
(define (cadr x) (car (cdr x)))


(define true 1)
(define false '())
(define (error msg)
	(display (+ "ERROR: " msg)))
(define (not judge)
	(if judge false true))

;; list-ref
(define (list-ref l i)
	(if (eq? i 0)
		(car l)
		(list-ref (cdr l) (- i 1))))
;; define procedure that gets list length
(define list-length (lambda (l)
	(define (list-length-iter l count)
		(if (null? l) 
			count
			(list-length-iter (cdr l) (+ count 1))))
	(list-length-iter l 0)))
;; list append
(define (append l append-value)
	(cond ((null? l) append-value)
		  (else
		  	(cons (car l)
		  		  (append (cdr l) append-value)))))
;; check symbol
(define (symbol? x)
	(atom? x))
;; check list
(define (list? x)
	(pair? x))
;; check empty
(define (empty? x)
	(null? x))

;; vector->list
(define (vector->list v)
	(define (vector->list-iter v i)
		(if (eq? i (len v))
			'()
			(cons (v i) (vector->list-iter v (+ i 1)))))
	(vector->list-iter v 0))

;; list->vector
(define (list->vector l)
	(define (list->vector-iter l output i)
		(if (null? l)
			output
			(begin
				(output i (car l))
				(list->vector-iter (cdr l) output (+ i 1))
				)))
	(list->vector-iter l [] 0))

;; list slice
(define (list-slice l index1 index2)
	(define (list-slice-remove-ahead i l) ;; remove head
		(if (eq? i index1)
			l
			(list-slice-remove-ahead (+ i 1) (cdr l))))
	(define (list-slice-iter l count reach-count)
		(if (eq? count reach-count)
			'()
			(cons (car l) (list-slice-iter (cdr l) (+ count 1) reach-count))))
	(list-slice-iter (list-slice-remove-ahead 0 l)
					 0
					 (- index2 index1)))

;; Toy Language lexer
;; Version 0.01
;; tokenize input_string to list
;; Lexer Doesnt Work
(define (lexer input_string)
	;; find final index of comment
	(define (find-final-comment-index input_string i)
		(cond ((eq? (len input_string) i)
			   i)
			  ((eq? (atom-ref input_string i) "\n")
			   (+ i 1))
			  (else (find-final-comment-index input_string (+ i 1)))
			))
	;; find next " index + 1
	(define (find-final-string-index input_string i)
		(cond ((eq? (len input_string) i)
			   (error "Incomplete String"))
			  ((eq? (atom-ref input_string i) "\\")
			  	(find-final-string-index input_string (+ i 2)))
			  ((eq? (atom-ref input_string i) "\"")
			  	(+ i 1))
			))
	;; find index of space tab ( ) [ ] { } \n ;
	(define (find-final-number-of-atom-index input_string i)
		(cond ((eq? (len input_string) i)
			   i)
		      ((eq? (atom-ref input_string i) "(")
		       i)
		      ((eq? (atom-ref input_string i) ")")
		       i)
		      ((eq? (atom-ref input_string i) "[")
		       i)
		      ((eq? (atom-ref input_string i) "]")
		       i)
		      ((eq? (atom-ref input_string i) "{")
		       i)
		      ((eq? (atom-ref input_string i) "}")
		       i)
		      ((eq? (atom-ref input_string i) " ")
		       i)
		      ((eq? (atom-ref input_string i) "\t")
		       i)
		      ((eq? (atom-ref input_string i) "\n")
		       i)
		      ((eq? (atom-ref input_string i) ";")
		       i)
		      (else
		      	(find-final-number-of-atom-index input_string (+ i 1)))))
	(define (lexer-iter input_string i)
		(cond ((eq? (atom-ref input_string i) " ") ;; space so continue
			   (lexer-iter input_string (+ i 1)))
			  ((eq? (atom-ref input_string i) "\t") ;; tab continue
			  	(lexer-iter input_string (+ i 1)))
			  ((eq? (atom-ref input_string i) "\n") ;; new line
			  	(lexer-iter input_string (+ i 1))) 
			  ((eq? (len input_string) i)
				'()) ;; finish lexer
			  ((eq? (atom-ref input_string i) "(")
			   (cons "(" (lexer-iter input_string (+ i 1)))) ;; find ( as list
			  ((eq? (atom-ref input_string i) "[") ;; find [ as vector
			  	(cons "(" (cons "vector" (lexer-iter input_string (+ i 1)))))
			  ((eq? (atom-ref input_string i) "{") ;; find { as dictionary
			  	(cons "(" (cons "dictionary" (lexer-iter input_string (+ i 1))))) 
			  ((eq? (atom-ref input_string i) ")") ;; )
			   	(cons ")" (lexer-iter input_string (+ i 1))))
			  ((eq? (atom-ref input_string i) "]") ;; ]
			  	(cons ")" (lexer-iter input_string (+ i 1))))
			  ((eq? (atom-ref input_string i) "}") ;; }
			  	(cons ")" (lexer-iter input_string (+ i 1))))
			  ;; ' quote
			  ((eq? (atom-ref input_string i) "'")
			  	(cons "'" (lexer-iter input_string (+ i 1))))
			  ;; , unquote
			  ((eq? (atom-ref input_string i) ",")
			  	(cons "," (lexer-iter input_string (+ i 1))))
			  ;; @ quasiquote
			  ((eq? (atom-ref input_string i) "@")
			  	(cons "@" (lexer-iter input_string (+ i 1))))
			  ;; comment 
			  ((eq? (atom-ref input_string i) ";")
			  	(lexer-iter input_string (find-final-comment-index input_string i)))
			  ;; string
			  ((eq? (atom-ref input_string i) "\"")
			  	(define end (find-final-string-index input_string (+ i 1)))
			  	(cons (list "(" "quote" (slice input_string i end)  ")")
			  		  (lexer-iter input_string end)))
			  (else ;; number or atom
			  	(define end (find-final-number-of-atom-index input_string (+ i 1)))
			  	(cons (slice input_string i end) 
			  		  (lexer-iter input_string end))
			  	)
			  )
		))

;; Toy Language Parser 
;; parse tokenized input_string list to 
;; syntax tree
;; well parser works
(define (parser l)
	;; return (result . rest)
	(define (parse-list l)
		(define (parse-list-iter output l)
			(cond ((null? l) ;; error
				   (error "Incomplete List"))
				  ((eq? (car l) ")") ;; end
				  	(cons output l))
				  ;; list
			      ((eq? (car l) "(")
			      	(define a (parse-list l))
			      	(parse-list-iter (append output (car a))
			      					 (cdr a)))
			   	  ;; quote
			      ((eq? (car l) "'")
			      	(defind a (parse-quote l))
			      	(parse-list-iter (append output (car a))
			      					 (cdr a)))
			      ;; unquote
			      ((eq? (car l) ",")
			      	(defind a (parse-unquote l))
			      	(parse-list-iter (append output (car a))
			      					 (cdr a)))
			      ;; quasiquote
			      ((eq? (car l) "@")
			      	(defind a (parse-quasiquote l))
			      	(parse-list-iter (append output (car a))
			      					 (cdr a)))
			      ;; symbol or number
			      (else
			      	(parse-list-iter (append output (car l))
			      					 (cdr l))
			      	)			  
				)
			)
		(parse-list-iter '() l)
		)
	(define (parse-quote l)
		(cons (list "quote" (cadr l))
			  (cddr l)))
	(define (parse-unquote l)
		(cons (list "unquote" (cadr l))
			  (cddr l)))
	(define (parse-quasiquote l)
		(cons (list "quasiquote" (cadr l))
			  (cddr l)))
	(cond ((null? l)
		   '())
		  ;; list
	      ((eq? (car l) "(")
	      	(define a (parse-list (cdr l)))
	      	(cons (car a) 
	      		  (parser (cdr a))))
	   	  ;; quote
	      ((eq? (car l) "'")
	      	(defind a (parse-quote l))
	      	(cons (car a)
	      		  (parser (cdr a))))
	      ;; unquote
	      ((eq? (car l) ",")
	      	(defind a (parse-unquote l))
	      	(cons (car a)
	      		  (parser (cdr a))))
	      ;; quasiquote
	      ((eq? (car l) "@")
	      	(defind a (parse-quasiquote l))
	      	(cons (car a)
	      		  (parser (cdr a))))
	      ;; symbol or number
	      (else
	      	(cons (car l) 
	      		  (parser (cdr l))))))




;; I may not use parser written by Toy now


;; Compiler 
;; pass list as parameter
;; here instructions are list as well
(define (compiler exp env instructions)
	)



























