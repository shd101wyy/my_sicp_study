;; Section 1.3
;; 1.3 formulating abstractions with higher -order procedures
(define cube
  (lambda (a)
    (* a a a)
    )
  )

;; sum from a to b
;; a: 1  b: 100 => 1+2+3+4+...+100
;;
;;
(define sum-integer 
  (lambda (a b)
    (if (> a b)
        0
        (+ a (sum-integer (+ a 1) b))
     )
    )
  )

;; 1-> 100
;; 1 + 8 + 27 + ...
(define sum-cube 
  (lambda (a b)
    (if (> a b)
        0
        (+ (cube a) (sum-cube (+ a 1) b))
     )
    )
  )

;; the formula below convergence to pi/8
(define pi-sum
  (lambda (a b)
    (if (> a b)
        0
        (+ (/ 1.0 (* a (+ a 2))) (pi-sum (+ a 4) b))
     )
    )
  )
;; general form
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b)
       )
      )
  )
;; inc 1
(define (inc a) (+ a 1))
(define (identity a) a)

;; redefine sum integer
(define (sum-integer a  b)
  (sum identity a inc b)
  )

;; redefine sum cube
(define (sum-cube a b)
  (sum cube a inc b)
)

;; redefine pi-sum
(define (pi-sum a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2)))
    )
  (define (pi-next x)
    (+ x 4)
    )
  (sum pi-term a pi-next b)
  )

;; integral
(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx)
  )
;; integral cube from 0 to 1 with dx 0.001
;; (display (integral cube 0 1 0.001))


;; section 1.3.3
;; Procedures as general methods
(define (average a b) (/ (+ a b) 2))
;; Finding roots of equation by the half-interval method
(define (search f neg-point pos-point)
  (let ((mid-point (average neg-point pos-point)))
    (if (close-enough? neg-point pos-point)
        mid-point
        (let ((test-value (f mid-point)))
          (cond ((positive? test-value)
                 (search f neg-point mid-point))
                ((negative? test-value)
                 (search f mid-point pos-point))
                (else mid-point))))))
(define (close-enough? x y)
  (< (abs (- x y)) 0.001)
  )
(define (half-interval-method f a b)
  (let ((a-value (f a))
        (b-value (f b)))
    (cond ((and (positive? a-value) (negative? b-value))
           (search f b a))
          ((and (negative? a-value) (positive? b-value))
           (search f a b))
          (else
           (error "Value are not opposite sign" a b)))))
;; (display (half-interval-method sin 2.0 4.0))
;; (display (half-interval-method (lambda (x) (- (* x x) 1)) -2.0 0.0))

;; 1.3.4
;; newton's method deriv
(define (deriv f)
  (let ((dx 0.0001))
    (lambda (x)
      (/ (- (f (+ x dx)) (f x))  dx)
      )
    )
  )
(define (cube x) (* x x x))
(display ((deriv cube) 5))

