
;; Hierarchical Data and the Closure Property

;; list operations

(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items) (- n 1))
      )
  )
(define (length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))))
(define (length items)
  (define (length-iter items count)
    (if (null? items)
        count
        (length-iter (cdr items) (+ count 1))
        )
    )
  (length-iter items 0)
  )
;; append two lists
;; (1 2) (3 4) -> (1 2 3 4)
(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))
;; 2.17
;; (list 23 72 149 34) => 34
(define (last-pair list)
  (if (null? (cdr list))
      (car list)
      (last-pair (cdr list))
   )
  )
;; 2.18
;; reverse the list
(define (reverse list)
  (define (reverse-iter list result)
    (if (null? list)
        result
        (reverse-iter (cdr list) (cons (car list) result))
        )
    )
  (reverse-iter list '())
  )


;; Mapping over list
(define (map proc items)
  (if (null? items)
      '()
      (cons (proc (car items))
            (map proc (cdr items))
            )
      )
  )
;; abs element in list
;;(display (map abs '(1 -1.2 3 -24)))
;; square element 
;;(display (map (lambda (x) (* x x)) '(1 2 3 4 5 6)))

;; 2.23
;; (for-each (lambda (x) (newline) (display x))
;; return arbitrary value
;; (list 57 321 88))
;; 57
;; 321
;; 88
(define (for-each proc items)
  (if (null? items)
      #t
      (begin
        (proc (car items))
        (for-each proc (cdr items))
        )
      )
  )
;; (for-each (lambda (x) (newline) (display x)) (list 57 321 88))

;; =================
;; Section 2.2.2
(define (count-leaves items)
  (cond ((null? items) 0)
        ((not (pair? items)) 1)
        (else
         (+ (count-leaves (car items))
            (count-leaves (cdr items))))
        )
  )

;; (display (length '(((1 2) 3 4) ((1 2) 3 4))))
;; (newline)
;; (display (count-leaves '(((1 2) 3 4) ((1 2) 3 4))))

;; Deep reverse
;; 2.2.7
;; ((1 2) (3 4) ) => ((4 3) (2 1))
(define (deep-reverse items)
  (define (deep-reverse-iter items result)
    (cond ((null? items) result)
          ((pair? items)
           (deep-reverse-iter (cdr items) 
                         (cons (reverse (car items)) result)))
          (else (deep-reverse-iter (cdr items)  (cons (car items) result)))
          )
    )
  (deep-reverse-iter items '())
  )
;; (display (deep-reverse '((3 4) (1 2))))


;; 2.2.8
;; ((1 2) (3) 4) => (1 2 3 4)
;; function fringe
(define (fringe items)
  (cond
   ((null? items) '())
   ((not (pair? (car items)))
    (cons (car items) (fringe (cdr items))))
   (else
    (append (fringe (car items))
          (fringe (cdr items)))
    )
   )
  )
;; (define x (list (list 1 2) (list 3 4)))
;; (display (fringe x))
;; (display (fringe (list x x)))


;; ========
;; Section 2.2.3
;; Sequences as Conventional Interfaces


