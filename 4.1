;; Metacular Evaluator
;; An evaluator that is written in the same language that it evaluates is said to be metacircular.
;;
;;       EVAL | APPLY
;;
(define true #t)
(define false #f)
;;
;; Eval-sequence is used by apply to evaluate the sequence of expressions in a procedure body and
;; by eval to evaluate the sequence of expressions in a begin expression. It takes as arguments a sequence of
;;  expressions and an environment, and evaluates the expressions in the order in which they occur.
;;  The value returned is the value of the final expression.
(define (eval-sequence exps env)
  (cond ((last-exp? exps)
         (eval (first-exp exps) env))
        (else
         (eval (first-exp exps) env)
         (eval-sequence (rest-exps exps) env))))

;; Assignments and definitions
;; =========
;; The following procedure handles assignments to variables.
;; It calls eval to find the value to be assigned and transmits the variable 
;; and the resulting value to set-variable-value! to be installed in the designated environment.
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (eval (assignment-value exp) env)
                       env)
  'ok)

;; Definitions of variables are handled in a similar manner.7
(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
                    (eval (definition-value exp) env)
                    env)
  'ok)

;; ==== self-evaluating
(define (self-evaluating? exp)
  (cond ((number? exp)
         exp)
        ((string? exp)
         exp)
        (else
         false)
   ))
(define (variable? exp)
  (symbol? exp))
;; ¤ Quotations have the form (quote <text-of-quotation>):9
(define (quoted? exp)
  (tagged-list? exp 'quote))
(define (cadr exp) (car (cdr exp)))
(define (caddr exp) (car (cdr (cdr exp))))
(define (caadr exp) (car (car (cdr exp))))
(define (cdadr exp) (cdr (car (cdr exp))))
(define (cddr exp) (cdr (cdr exp)))
(define (cdddr exp) (cdr (cdr (cdr exp))))
(define (cadddr exp) (car (cdr (cdr (cdr exp)))))

(define (text-of-quotation exp) (cadr exp)) ;; get content of quotation
;; Quoted? is defined in terms of the procedure tagged-list?, which identifies lists beginning with a
;; designated symbol:
(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))

;; ======
;;¤ Assignments have the form (set! <var> <value>):
(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (assignment-variable exp) (cadr exp))
(define (assignment-value exp) (caddr exp))
;; ======
;; ¤ Definitions have the form
;; (define <var> <value>)
;; or the form
;; (define (<var> <parameter1> ... <parametern>) <body>)
;; The latter form (standard procedure definition) is syntactic sugar for
;; (define <var>
;;   (lambda (<parameter1> ... <parametern>)
;;     <body>))
(define (definition? exp)
  (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)      ;; (define a 12)
      (caadr exp)))   ;; (define (add a b) 12)
(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)     ;; (define a 12)
      (make-lambda    ;; (define (add a b) (+ a b))
           (cdadr exp)   ;; (a b)
           (cddr exp)))) ;; (+ a b)
;; ======
;; Lambda
;; ¤ Lambda expressions are lists that begin with the symbol lambda:
(define (lambda? exp) (tagged-list exp 'lambda))
(define (lambda-parameters exp) (cadr exp))
(define (lambda-body exp) (cddr exp))
;; We also provide a constructor for lambda expressions, which is used by definition-value, above:
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))
;; =====
;; ¤ Conditionals begin with if and have a predicate, a consequent, and an (optional) alternative.
;; If the expression has no alternative part, we provide false as the alternative.10
;; (if judge cons alt)
(define (if? exp) (tagged-list? exp 'if))
(define (if-predicate exp) (cadr exp))
(define (if-consequent exp) (caddr exp))
(define (if-alternative exp)
  (if (not (null? (cdddr exp)))
      (cadddr exp)
      'false))

;; We also provide a constructor for if expressions, to be used by cond->if to transform cond
;; expressions into if expressions:

(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))

;; ¤ Begin packages a sequence of expressions into a single expression. We include syntax operations
;; on begin expressions to extract the actual sequence from the begin expression, as well as
;;  selectors that return the first expression and the rest of the expressions in the sequence.11
(define (begin? exp) (tagged-list? exp 'begin))
(define (begin-actions exp) (cdr exp))
(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exps seq) (cdr seq))

;; We also include a constructor sequence->exp (for use by cond->if) that transforms a sequence into
;; a single expression, using begin if necessary:
(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-seq seq))
        (else (make-begin seq))))
(define (make-begin seq)
  (cons 'begin seq))

;; ¤ A procedure application is any compound expression that is not one of the above expression types
;; . The car of the expression is the operator, and the cdr is the list of operands:
(define (application? exp) (pair? exp))
(define (operator exp) (car operator))
(define (operands exp) (cdr exp))
(define (no-operands? ops) (null? ops))
(define (first-operand ops) (car ops))
(define (rest-operands ops) (cdr ops))

;;=====
;; Derived Expressions
;; eg: convert Cond exp to If exp
(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clauses clause) 
  (eq? (cond-predicate clause) 'else))

(define (cond-predicate clause) (car clause))
(define (cond-actions clause) (cdr clause))

(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
(define (expand-clauses clauses)
  (if (null? clauses)
      false
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (if (cond-else-clauses first)
            (if (null? rest)
                (sequence->exp (cond-actions first))
                (error "ELSE clause isn't last -- COND->IF" clauses ))
            (make-if (cond-predicate first)
                     (sequence->exp (cond-actions first))
                     (expand-clauses rest))))))

;; ==== 4.1.3
;; Evaluator Data Structure
;; test predicate
(define (true? x)
  (not (eq? x false)))
(define (false? x)
  (eq? x false))
;; Representing Procedures
;;------
;; (apply-primitive-procedure <proc> <args>)
;; applies the given primitive procedure to the argument values in the list <args> and returns the
;; result of the application.
;;------
;; (primitive-procedure? <proc>) 
;;  tests whether <proc> is a primitive procedure.
(define (make-procedure parameters body env)
  (list 'procedure parameters body env))
(define (compound-procedure? p)
  (tagged-list? p 'procedure))
(define (procedure-parameters p) (cadr p))
(define (procedure-body p) (caddr p))
(define (procedure-environment p) (cadddr p)) 

;; ======= Operations on ENV
;; IMPORTANT ------

;; ● (lookup-variable-value <var> <env>)
;; returns the value that is bound to the symbol <var> in the environment <env>, or signals an error
;; if the variable is unbound.
;;
;; ● (extend-environment <variables> <values> <base-env>)
;; returns a new environment, consisting of a new frame in which the symbols in the list <variables>
;; are bound to the corresponding elements in the list <values>, where the enclosing environment is the environment <base-env>.
;;
;; ● (define-variable! <var> <value> <env>)
;; adds to the first frame in the environment <env> a new binding that associates the variable <var> with the value <value>.
;;
;; ● (set-variable-value! <var> <value> <env>)
;; changes the binding of the variable <var> in the environment <env> so that the variable is now bound to the value <value>, or signals an error if the variable is unbound.

(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define (the-empty-env env) '())

;; Each frame of an environment is represented as a pair of lists: a list of the variables bound in that frame and a list of the associated values.14
(define (make-frame variables values)
  (cons variables values))
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))

;; To extend an environment by a new frame that associates variables with values,
;; we make a frame consisting of the list of variables and the list of values, and we adjoin this to the environment. 
;; We signal an error if the number of variables does not match the number of values.

;; add frame to env
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied" vars vals )
          (error "Too few arguments supplied" vars vals))))

;; To look up a variable in an environment, we scan the list of variables in the first frame. 
;; If we find the desired variable, we return the corresponding element in the list of values.
;; If we do not find the variable in the current frame, we search the enclosing environment, and so on.
;; If we reach the empty environment, we signal an ``unbound variable'' error.
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car var))
             (car vals))
            (else (scan (cdr vars) (cdr vals))))
      (if (eq? env the-empty-environment)
          (error "Unbound variable" var)
          (let ((frame (first-frame env)))
            (scan (frame-variables frame)
                  (frame-values frame))))))
  (env-loop env))
;; set!
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))

;; define
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars)
             (add-binding-to-frame! var val frame))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))

;; ===== 4.1.4
;; -----------
;; set up environment
(define the-empty-environment '())
(define (setup-environment)
  (let ((initial-env 
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))
;; (define the-global-env (setup-environment))

(define (primitive-procedure? proc) (tagged-list? proc 'primitive))
(define (primitive-implementation proc) (cadr proc))

(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
        ;; <more primitives>
        ))
(define (primitive-procedure-names)
  (map car primitive-procedures))

(define (primitive-procedure-objects)
  (map (lambda (proc) (list 'primitive (cadr proc)))
       primitive-procedures))
 
(define apply-in-underlying-scheme apply) ;; scheme apply
;; To apply a primitive procedure, we simply apply the implementation procedure to the arguments, using the underlying Lisp system:17
(define (apply-primitive-procedure proc args)
  (apply-in-underlying-scheme
   (primitive-implementation proc) args))

;; prompt
(define input-prompt ";;; M-Eval input:")
(define output-prompt ";;; M-Eval value:")
(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (eval input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))
(define (prompt-for-input string)
  (newline) (newline) (display string) (newline))
(define (announce-output string)
  (newline) (display string) (newline))
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     '<procedure-env>))
      (display object)))


;; EVAL
(define (eval exp env)
  ;; procedure arugments
  (define (list-of-values exps env)
    (if (no-operands? exps)
        '()
        (cons (eval (first-operand exps) env)
              (list-of-values (rest-operands exps) env))))
  ;; Conditionals
  ;; if
  (define (eval-if exp env)
    (if (true? (eval (if-predicate exp) env))
        (eval (if-consequent exp) env)
        (eval (if-alternative exp) env)))


  (cond ((self-evaluating? exp) exp) ;; like number
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type -- EVAL" exp))))

;; Apply
(define (apply procedure arguments)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         (eval-sequence
          (procedure-body procedure)
          (extend-environment
           (procedure-parameters procedure)
           arguments
           (procedure-environment procedure))))
        (else (error
               "Unknown procedure type -- APPLY" procedure))))


;; ==== 4.1.7
;; Seperating Syntactic Analysis from Execution
;; improve efficiency
(define (eval exp env)
  ((analyze exp) env))
(define (analyze exp)
  (cond ((self-evaluating? exp)
         (analyze-self-evaluating exp))
        ((quoted? exp) (analyze-quoted exp))
        ((variable? exp) (analyze-variable exp))
        ((assignment? exp) (analyze-assignment exp))
        ((definition? exp) (analyze-definition exp))
        ((if? exp) (analyze-if exp))
        ((lambda? exp) (analyze-lambda exp))
        ((begin? exp) (analyze-sequence (begin-actions exp)))
        ((cond? exp) (analyze (cond->if exp)))
        ((application? exp) (analyze-application exp))
        (else
         (error "Unknown expression type -- ANALYZE" exp))))

(define (analyze-self-evaluating exp)
  (lambda (env) exp))
(define (analyze-quoted exp)
  (let ((qval (text-of-quotation exp)))
￼￼(lambda (env) qval)))
(define (analyze-variable exp)
  (lambda (env) (lookup-variable-value exp env)))
(define (analyze-assignment exp)
  (let ((var (assignment-variable exp))
        (vproc (analyze (assignment-value exp))))
    (lambda (env)
      (set-variable-value! var (vproc env) env)
      'ok)))
(define (analyze-definition exp)
  (let ((var (definition-variable exp))
        (vproc (analyze (definition-value exp))))
    (lambda (env)
      (define-variable! var (vproc env) env)
      'ok)))
(define (analyze-if exp)
  (let ((pproc (analyze (if-predicate exp)))
        (cproc (analyze (if-consequent exp)))
        (aproc (analyze (if-alternative exp))))
    (lambda (env)
      (if (true? (pproc env))
          (cproc env)
          (aproc env)))))
(define (analyze-lambda exp)
  (let ((vars (lambda-parameters exp))
        (bproc (analyze-sequence (lambda-body exp))))
    (lambda (env) (make-procedure vars bproc env))))
(define (analyze-sequence exps)
  (define (sequentially proc1 proc2)
    (lambda (env) (proc1 env) (proc2 env)))
  (define (loop first-proc rest-procs)
    (if (null? rest-procs)
        first-proc
        (loop (sequentially first-proc (car rest-procs))
              (cdr rest-procs))))
  (let ((procs (map analyze exps)))
    (if (null? procs)
        (error "Empty sequence -- ANALYZE"))
    (loop (car procs) (cdr procs))))
(define (analyze-application exp)
  (let ((fproc (analyze (operator exp)))
        (aprocs (map analyze (operands exp))))
    (lambda (env)
      (execute-application (fproc env)
                           (map (lambda (aproc) (aproc env))
                                aprocs)))))
(define (execute-application proc args)
  (cond ((primitive-procedure? proc)
         (apply-primitive-procedure proc args))
        ((compound-procedure? proc)
         ((procedure-body proc)
          (extend-environment (procedure-parameters proc)
                              args
                              (procedure-environment proc))))
        (else (error
               "Unknown procedure type -- EXECUTE-APPLICATION"
               proc))))

;; run repl
(define the-global-environment (setup-environment))
(driver-loop)
